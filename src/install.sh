#!/bin/bash
# clear
kcore=$PWD/node_modules/kishcore

# echo ''
# cat $kcore/src/lib/ascii.txt
# echo ''

dest="$HOME/.kish"
alias_source="source $dest/aliases.sh "


b1='  ,-,-.   '
b2=' / ( I \  '
b3=' \ K ) /  '
b4="  \`-'-'   "

# cp "./tasks/lib/*" "$dest/lib"
# echo "mkdir $dest"

preflight() {
  # works but todo:
  # need to remove and src $HOME profile first!
  # need to know what profile using ~/.zshrc ~/.zshenv / ~/.bashrc  ~/.bash_profile etc / other

  if [ ! -d "$PWD/aliases" ] || [ ! -d "$kcore/src/lib" ]; then
    echo "Preflight check not passed."
    echo 'install must be run from kish/ folder. '
    echo 'ie: from kish run:  ./node_moudles/src/install.sh'
    echo 'The reason being: install needs to locate your local files so they can be kept under source control'
    exit
  fi

  if [ -d $dest ]; then
    echo "Preflight check not passed."
    echo "target: $dest already exists."
    echo "to prevent unintentional overwrite, remove it first."
    echo "you can run kish/src/remove.sh"
    echo "or yarn update - which removes target and then re-installs"
    exit
  fi

  # if [ -n "$ZSH_VERSION" ]; then
  #   # assume Zsh
  #   source "$HOME/.zshrc"
  # elif [ -n "$BASH_VERSION" ]; then
  #   # assume Bash
  #   source "$HOME/.bashrc"
  #   # else
  #   # assume something else
  # fi

  # check not overriding existing commands.
  # note: above checks take care of preinstalled kish.
  # only concerend about binary commands.


 if [ -d "$dest" ]; then
 
  echo "Install will replace $dest with $PWD/aliases"
  read -r -p 'Do you want to continue? ' choice
      case "$choice" in
        n|N) echo 'quitting' && exit;;
        y|Y) 
        rm -rf $dest
        # AT rm $dest/* rm $dest/lib/* (preserve temp -rename log)
        # echo 'you should probably remove the line source ~./kish/aliases.sh from ~/.bashrc and or ~/.zshrc manually as well.' &&
        exit ;;
        *) echo 'Response not valid';;
      esac

fi

  for f in ./aliases/*; do

    if [[ -f "$f" ]]; then
      sanspath="${f##*/}"       # trim path before cmd name
      rawf=${sanspath/'.sh'/''} #trim off .sh

      if $rawf &>/dev/null; then

        echo "Preflight check not passed."
        echo "$rawf is an existing command so wont proceed."
        echo "overriding existing commands not permitted - for your own system safety."
        echo "rename shortasks/$rawf.sh and its cmd=$rawf and try again."
        exit
      fi
    fi
  done

}

stinstall() {
  # echo 'prepare$PWD.'
  #  clear
  
  # echo 'Preflight checks passed'
  # echo ''
  # echo 'Welcome to the Ki sh installation.'
  # echo "Installs to $dest."
  # echo ''

  # echo "You should look at the code to check its safe."
  # echo 'Easy minute to check -only 400 simple lines. put it in all in one file:'
  # echo '$ find kish/ -name '*.sh' -exec cat {} \; > allcode.sh'
  # echo '$ find kish/lib -name '*.sh' -exec cat {} \; >> allcode.sh'
  # echo ''
  mkdir "$dest"
  mkdir "$dest/lib"
  [[ ! -d "$HOME/.kishlog" ]] && mkdir "$HOME/.kishlog"
  # [[ ! -d "$dest/temp" ]] && mkdir "$dest/temp" # for state tracking files. dont overwrite

  # ensure file exists and empty
  alias_file="$PWD/aliases/aliases.sh"
  touch "$alias_file"
  echo '#!/bin/bash' >"$alias_file"
    echo '# file generated by kiu command. do not edit.' >> "$alias_file"

  help_file="$PWD/aliases/lib/generatedhelp.txt"

  touch $help_file
  echo "" >$help_file

  prev_first_letter=''
  # update aliases.sh based on all scripts in src/kish/
  for f in ./aliases/*; do
  
 
    if [[ -f "$f" ]]; then
      a=${f/.\/aliases\//''} # trim path before cmd name
      b=${a/'.sh'/''}           #trim off .sh

      line="alias $b"'=$HOME/.kish/'"$a"
      # exclude alaises its self as in aliases folder.
      if [ $b != 'aliases' ] && [[ $b != *dr ]] && [[ $b != *test* ]] && [[ $b != *lib* ]]; then
        # todo - nice to have: check if a dr file made, indicate (dr)
        # if [ -f "$PWD/aliases/$f dr" ]
        echo $line >>$alias_file
        # if dr version file: (dr)

        cmd="$(echo $(grep 'cmd=' $f) | cut -d'=' -f2)"

    first_letter=${b:0:1}
     if [  "$prev_first_letter" = "$first_letter" ]; then
         unchanged_first_letter=true # dummy var so can else. yuk
        #  echo "$prev_first_letter = $first_letter"
      else
    #  echo "$prev_first_letter not eq $first_letter"
     echo "" >>$help_file
      echo "    [$first_letter]..." >>$help_file  # line break when first letter changes.  
      prev_first_letter=$first_letter 
     fi 
    
        spaces=$((10 - ${#b}))
        printf "     %s %*s :      %s \n" "$b" "$spaces" "" "$cmd" >>$help_file
      fi

    fi
  done

  # copy tasks/* to $dest
  for f in "$PWD"/aliases/*; do
    if [[ -f "$f" ]]; then
      # echo "$f $dest${f##*/}"
      cp "$f" "$dest/${f##*/}"
      chmod a+x "$dest/${f##*/}"
    fi
  done

  # copy kishcore/src/lib/* files (not subdirs) to $dest
  for f in "$kcore"/src/lib/*; do
    if [[ -f "$f" ]]; then
      # echo "$f $dest${f##*/}"
      cp "$f" "$dest/lib/${f##*/}"
      chmod a+x "$dest/lib/${f##*/}"
    fi
  done

  # copy generatedhelp.
  cp $PWD/aliases/lib/generatedhelp.txt $dest/lib/generatedhelp.txt

  z_has_alias_source=$(grep "$alias_source" "$HOME/.zshrc")

  if [ "$z_has_alias_source" ]; then
    echo '' # 'zshrc already sources alias. skipping.'
  else
    echo " export KISHDIR=$PWD" >>"$HOME/.zshrc"
    echo " export KISHCOREDIR=$kcore" >>"$HOME/.zshrc"
    echo " $alias_source" >>"$HOME/.zshrc"
  fi

  b_has_alias_source=$(grep "$alias_source" "$HOME/.bashrc")

  if [ "$b_has_alias_source" ]; then
    echo '' # '.bashrc already sources alias. skipping.'
  else
     echo " export KISHDIR=$PWD" >>"$HOME/.bashrc"
    echo " export KISHCOREDIR=$kcore" >>"$HOME/.bashrc"
    echo "$alias_source" >>"$HOME/.bashrc"
  fi

  echo "$b1"
  echo "$b2 ki sh Updated."
  echo "$b3 if new aliases added restart terminal." 
  echo "$b4 $>ki for generated help."
  echo ""

}

if [ "$1" = '-i' ]; then
  read -r -p 'Do you want to continue installation?(y/n) ' choice
  case "$choice" in
  n | N) echo 'quitting' && exit ;;
  y | Y)
    clear
    preflight
    stinstall
    exit
    ;;
  *) echo 'Response not valid' ;;
  esac
else
  preflight
  stinstall
fi
